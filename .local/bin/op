#!/bin/bash

PATH_OP="~/Sources/openpatch"
DB_HOST="bm1048291-001.dbaas.ovh.net"
DB_PORT="35801"

DOCKER_SERVICES="authentification-backend assessment-backend comment-backend format-backend itembank-backend recorder-backend mail-backend activity-backend media-backend"
DOCKER_DB_SERVICES="authentification-backend assessment-backend comment-backend itembank-backend recorder-backend activity-backend media-backend"
DOCKER_NETWORKS="openpatch-backend openpatch-runner-net rabbitmq"

REACT_SERVICES="web-frontend"

usage() {
cat << EOI
Usage:
  op init | start | stop | rebuild | pull | db

Options:
  start     Starts all docker and react services
  stop      Stops all docker and react services
  db        Manage databases 
  rebuild   Removes all container, pulls new images, cleans node_modules and builds everything new
EOI
}

usage_db() {
cat << EOI
Usage:
  op db 

Options:
  mirror    Mirror remote databse
  backup    Backup current local databases
  restore   Restore current local database
EOI
}

usage_git() {
cat << EOI
Usage:
  op git

Options:
  init      Inits and pulls down all git repositories
  pull      Pulls down all git repositories
  status    Status of all git repositories
  changelog Get commits since last tag
  latest    Get latest tags
EOI
}

usage_tools() {
cat << EOI
Usage:
  op tools

Options:
  mkvenv    Makes venv and installs basic dependencies
EOI
}

start_op() {
  for docker_service in ${DOCKER_SERVICES}; do
    x-terminal-emulator --title $docker_service -e bash -c "cd ${PATH_OP} && cd ${docker_service} && docker-compose up" &
  done

  for react_service in ${REACT_SERVICES}; do
    x-terminal-emulator --title $react_service -e bash -c "cd ${PATH_OP} && cd ${react_service} && yarn install && yarn dev" &
  done
}

stop_op() {
  for docker_service in ${DOCKER_SERVICES}; do
    bash -c "cd ${PATH_OP} && cd ${docker_service} && docker-compose down"
  done

 ps ax | grep web-frontend | cut -f1 -d" " - | xargs kill

  for react_service in ${REACT_SERVICES}; do
    bash -c "ps ax | grep \"cd ${PATH_OP} && cd ${react_service} && git pull && yarn install && yarn dev\" | head -n 1 | awk '{print \$1}' | xargs kill"
  done
}

rebuild_op() {
  for docker_service in ${DOCKER_SERVICES}; do
    x-terminal-emulator --title "$docker_service-rebuild" -e bash -c "cd ${PATH_OP} && cd ${docker_service} && git pull && docker-compose remove && docker-compose pull && docker-compose build" &
  done

  for react_service in ${REACT_SERVICES}; do
    x-terminal-emulator --title "$react_service-rebuild" -e bash -c "cd ${PATH_OP} && cd ${react_service} && git pull && rm -rf node_modules && yarn install" &
  done
}

db_mirror_op() {
  mkdir -p ~/.cache/op/dumps
  read -p "Enter Database User: " user
  read -s -p "Enter Database Password: " password
  echo ""
  for docker_service in ${DOCKER_DB_SERVICES}; do
    echo -e "\e[34mMirror: ${docker_service}"
    echo -e "\e[0m"
    DB_NAME=$(echo "${docker_service}" | cut -d- -f1)
    backup_name=$(date +%Y%m%d%H%M%S).sql
    mkdir -p ~/.cache/op/dumps/${DB_NAME}
    mysqldump --host=$DB_HOST --port=$DB_PORT -u $user -p$password $DB_NAME > ~/.cache/op/dumps/${DB_NAME}/$backup_name

    bash -c "cd ${PATH_OP} \
      && cd ${docker_service} \
      && docker-compose exec database mysql -u $DB_NAME -p$DB_NAME $DB_NAME -e \"DROP DATABASE $DB_NAME; CREATE DATABASE $DB_NAME;\" \
      && docker-compose exec -T database mysql -u $DB_NAME -p$DB_NAME $DB_NAME < ~/.cache/op/dumps/${DB_NAME}/${backup_name} \
      && docker-compose restart migration"
  done
}

db_connect() {
  read -p "Enter Database User: " user
  read -s -p "Enter Database Password: " password
  echo ""
  mysql --host=$DB_HOST --port=$DB_PORT -u $user -p$password $1
}

db_backup_op() {
  echo "currently not implemented"
}

db_restore_op() {
  echo "currently not implemented"
}


git_init_op() {
  for docker_network in ${DOCKER_NETWORKS}; do
    echo ""
    echo -e "\e[34mInit Network: ${docker_network}"
    echo -e "\e[0m"
    bash -c "docker network create ${docker_network}"
  done

  for docker_service in ${DOCKER_SERVICES}; do
    echo ""
    echo -e "\e[34mInit: ${docker_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && git clone git@gitlab.com:openpatch/${docker_service}.git"
  done

  for react_service in ${REACT_SERVICES}; do
    echo ""
    echo -e "\e[34mInit: ${react_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && git clone git@gitlab.com:openpatch/${react_service}.git"
  done
}

git_pull_op() {
  for docker_service in ${DOCKER_SERVICES}; do
    echo ""
    echo -e "\e[34mPull: ${docker_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && cd ${docker_service} && git pull git@gitlab.com:openpatch/${docker_service}.git"
  done

  for react_service in ${REACT_SERVICES}; do
    echo ""
    echo -e "\e[34mPull: ${react_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && cd ${react_service} && git pull git@gitlab.com:openpatch/${react_service}.git"
  done
}

git_status_op() {
  for docker_service in ${DOCKER_SERVICES}; do
    echo ""
    echo -e "\e[34mStatus: ${docker_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && cd ${docker_service} && git status"
  done

  for react_service in ${REACT_SERVICES}; do
    echo ""
    echo -e "\e[34mStatus: ${react_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && cd ${react_service} && git status"
  done
}

git_latest() {
  for docker_service in ${DOCKER_SERVICES}; do
    echo ""
    echo -e "\e[34mLatest: ${docker_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && cd ${docker_service} && git pull && git describe --tags --abbrev=0"
  done

  for react_service in ${REACT_SERVICES}; do
    echo ""
    echo -e "\e[34mLatest: ${react_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && cd ${react_service} && git pull && git describe --tags --abbrev=0"
  done
}

git_changelog() {
  for docker_service in ${DOCKER_SERVICES}; do
    echo ""
    echo -e "\e[34mChangelog: ${docker_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && cd ${docker_service} && git pull && git --no-pager log \$(git describe --tags --abbrev=0)..HEAD --oneline"
  done

  for react_service in ${REACT_SERVICES}; do
    echo ""
    echo -e "\e[34mChangelog: ${react_service}"
    echo -e "\e[0m"
    bash -c "cd ${PATH_OP} && cd ${react_service} && git pull && git --no-pager log \$(git describe --tags --abbrev=0)..HEAD --oneline"
  done
}

tools_mkvenv() {
  project_name=${PWD##*/}
  echo $project_name
  source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
  mkvirtualenv --python=/usr/bin/python3 $project_name
  workon $project_name
  wget https://gitlab.com/openpatch/flask-microservice-base/-/raw/master/requirements.txt -O /tmp/requirements.txt
  wget https://gitlab.com/openpatch/flask-microservice-base/-/raw/master/requirements.dev.txt -O /tmp/requirements.dev.txt
  pip install -r /tmp/requirements.txt
  pip install -r /tmp/requirements.dev.txt
  pip install -r requirements.txt
}


db_op() {
  case "$1" in
    mirror)
      db_mirror_op
      ;;
    backup)
      db_backup_op
      ;;
    restore)
      db_restore_op
      ;;
    connect)
      db_connect $2
      ;;
    *)
      usage_db
      ;;
  esac
}

git_op() {
  case "$1" in
    pull)
      git_pull_op
      ;;
    init)
      git_init_op
      ;;
    status)
      git_status_op
      ;;
    changelog)
      git_changelog
      ;;
    latest)
      git_latest
      ;;
    *)
      usage_git
      ;;
  esac
}

tools_op() {
  case "$1" in
    mkvenv)
      tools_mkvenv
      ;;
    *)
      usage_tools
      ;;
  esac
}

case "$1" in
  start)
    start_op
    ;;
  stop)
    stop_op
    ;;
  rebuild)
    rebuild_op
    ;;
  git)
    git_op $2
    ;;
  db)
    db_op $2 $3
    ;;
  tools)
    tools_op $2
    ;;
  *)
    usage
    ;;
esac

exit 0
